#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Check if commit message is empty
if [ -z "$1" ]; then
    echo "❌ Commit message cannot be empty. Please provide a meaningful message."
    exit 1
fi

# Run commitlint
npx commitlint --edit "$1" && {
    commit_message=$(cat "$1")
    echo "✅ Successful Commit!"
    echo "$commit_message"
    exit 0
} || {
    echo ""
    echo "$commit_message"
    echo ""
    echo "❌ Commit message does not follow the convention!"
    echo "✅ Correct format example: 'feat(frontend): Add user authentication (fix #12)'"
    echo ""
    echo "Commit message structure:"
    echo ""
    echo "| Type     | Scope      | Description                        |"
    echo "|----------|------------|------------------------------------|"
    echo "| feat     | frontend   | Add a new feature                  |"
    echo "| fix      | backend    | Fix an issue (mention issue #)     |"
    echo "| docs     | root       | Update documentation               |"
    echo "| style    | frontend   | Code style changes (no logic)      |"
    echo "| refactor | backend    | Refactoring existing code          |"
    echo "| perf     | backend    | Improve performance                |"
    echo "| test     | frontend   | Add or update tests                |"
    echo "| build    | root       | Build system or CI changes         |"
    echo "| chore    | root       | Other changes                      |"
    echo ""
    echo "Example commits:"
    echo ""
    echo "- feat(frontend): Implement new login form"
    echo "- fix(backend): Resolve user authentication bug (fix #15)"
    echo "- docs(root): Update API documentation"
    echo "- refactor(frontend): Simplify state management"
    echo ""
    exit 1
}

# Get current branch name
branch_name=$(git rev-parse --abbrev-ref HEAD)

# Check if the branch name starts with 'fix/' and follows the expected pattern
if [[ "$branch_name" =~ ^fix/([^/]+)-issue([0-9]+)-(r|f|b)$ ]]; then
    # Extract the title, issue number, and suffix (scope)
    title=${BASH_REMATCH[1]}
    issue_number=${BASH_REMATCH[2]}
    suffix=${BASH_REMATCH[3]}

  # Map suffix to scope
  case $suffix in
    "r")
      scope="root"
      ;;
    "f")
      scope="frontend"
      ;;
    "b")
      scope="backend"
      ;;
    *)
      echo "❌ Invalid scope. Allowed suffixes are -r (root), -f (frontend), -b (backend)."
      exit 1
      ;;
  esac

  # Format the commit message
  commit_message="fix($scope): $title (fix#$issue_number)"
  echo "$commit_message" > "$1"
else
  echo "❌ Invalid branch name format. Please follow 'fix/{title}-issue{number}-{r|f|b}'"
  exit 1
fi
